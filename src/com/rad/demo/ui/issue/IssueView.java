/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.rad.demo.ui.issue;

import com.rad.demo.database.ApparatusSQL;
import com.rad.demo.database.ListSQL;
import com.rad.demo.entities.Apparatus;
import com.rad.demo.entities.ApparatusList;
import com.rad.demo.entities.ListItems;
import com.rad.demo.ui.DashBoardView;
import com.rad.demo.ui.utils.ColorPalette;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author BHARATHA
 */
public class IssueView extends javax.swing.JInternalFrame {

    /**
     * Creates new form Issue
     */
    private DefaultTableModel dtmFamily;
    private DefaultTableModel dtmComponent;
    private DefaultTableModel dtmList;
    private String index;
    private ArrayList<Object> components;
    private int adminId;

    public IssueView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblIndex = new javax.swing.JLabel();
        pnlLogOutBtn = new javax.swing.JPanel();
        btnLogOut = new javax.swing.JLabel();
        lblGroup = new javax.swing.JLabel();
        lblComponent = new javax.swing.JLabel();
        cmbGroup = new javax.swing.JComboBox<>();
        txtComponent = new javax.swing.JTextField();
        ScrollPaneGroup = new javax.swing.JScrollPane();
        tblFamily = new javax.swing.JTable();
        ScrollPaneComponent = new javax.swing.JScrollPane();
        tblComponent = new javax.swing.JTable();
        lblQty = new javax.swing.JLabel();
        spinnerQty = new javax.swing.JSpinner();
        ScrollPaneList = new javax.swing.JScrollPane();
        tblList = new javax.swing.JTable();
        btnAddToTable = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnRemoveFromTable = new javax.swing.JButton();
        btnAddToList = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 120, 212)));
        setTitle("Issue");

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblIndex.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        lblIndex.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jPanel1.add(lblIndex, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 0, 80, 30));

        btnLogOut.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btnLogOut.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnLogOut.setText("Log Out");
        btnLogOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnLogOutMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnLogOutMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnLogOutMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout pnlLogOutBtnLayout = new javax.swing.GroupLayout(pnlLogOutBtn);
        pnlLogOutBtn.setLayout(pnlLogOutBtnLayout);
        pnlLogOutBtnLayout.setHorizontalGroup(
            pnlLogOutBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnLogOut, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
        );
        pnlLogOutBtnLayout.setVerticalGroup(
            pnlLogOutBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnLogOut, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
        );

        jPanel1.add(pnlLogOutBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 0, -1, 30));

        lblGroup.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        lblGroup.setText("Group :");
        jPanel1.add(lblGroup, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, 70, -1));

        lblComponent.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        lblComponent.setText("Component :");
        jPanel1.add(lblComponent, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 20, 120, -1));

        cmbGroup.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        cmbGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbGroupActionPerformed(evt);
            }
        });
        jPanel1.add(cmbGroup, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, 230, -1));

        txtComponent.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        txtComponent.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        txtComponent.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtComponentKeyReleased(evt);
            }
        });
        jPanel1.add(txtComponent, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 40, 310, -1));

        tblFamily.setBackground(new java.awt.Color(240, 240, 240));
        tblFamily.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tblFamily.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Family"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblFamily.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblFamily.setGridColor(new java.awt.Color(240, 240, 240));
        tblFamily.getTableHeader().setReorderingAllowed(false);
        tblFamily.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblFamilyMouseReleased(evt);
            }
        });
        ScrollPaneGroup.setViewportView(tblFamily);
        if (tblFamily.getColumnModel().getColumnCount() > 0) {
            tblFamily.getColumnModel().getColumn(0).setResizable(false);
        }

        jPanel1.add(ScrollPaneGroup, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, 230, 180));

        tblComponent.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tblComponent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Component", "QTY"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblComponent.getTableHeader().setReorderingAllowed(false);
        ScrollPaneComponent.setViewportView(tblComponent);
        if (tblComponent.getColumnModel().getColumnCount() > 0) {
            tblComponent.getColumnModel().getColumn(1).setMinWidth(0);
            tblComponent.getColumnModel().getColumn(1).setPreferredWidth(90);
            tblComponent.getColumnModel().getColumn(1).setMaxWidth(90);
        }

        jPanel1.add(ScrollPaneComponent, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 70, 310, 180));

        lblQty.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        lblQty.setText("QTY :");
        jPanel1.add(lblQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 260, -1, 20));

        spinnerQty.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        spinnerQty.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerQtyStateChanged(evt);
            }
        });
        jPanel1.add(spinnerQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 260, 60, -1));

        tblList.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tblList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Group", "Family", "Component", "QTY"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblList.getTableHeader().setReorderingAllowed(false);
        ScrollPaneList.setViewportView(tblList);
        if (tblList.getColumnModel().getColumnCount() > 0) {
            tblList.getColumnModel().getColumn(0).setMinWidth(0);
            tblList.getColumnModel().getColumn(0).setPreferredWidth(90);
            tblList.getColumnModel().getColumn(0).setMaxWidth(90);
            tblList.getColumnModel().getColumn(1).setMinWidth(0);
            tblList.getColumnModel().getColumn(1).setPreferredWidth(175);
            tblList.getColumnModel().getColumn(1).setMaxWidth(175);
            tblList.getColumnModel().getColumn(3).setMinWidth(0);
            tblList.getColumnModel().getColumn(3).setPreferredWidth(60);
            tblList.getColumnModel().getColumn(3).setMaxWidth(60);
        }

        jPanel1.add(ScrollPaneList, new org.netbeans.lib.awtextra.AbsoluteConstraints(38, 322, 570, 140));

        btnAddToTable.setText("Add");
        btnAddToTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToTableActionPerformed(evt);
            }
        });
        jPanel1.add(btnAddToTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 290, 90, -1));

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        jPanel1.add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 480, 80, -1));

        btnRemoveFromTable.setText("Remove");
        btnRemoveFromTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveFromTableActionPerformed(evt);
            }
        });
        jPanel1.add(btnRemoveFromTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 480, 80, -1));

        btnAddToList.setText("Add");
        btnAddToList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToListActionPerformed(evt);
            }
        });
        jPanel1.add(btnAddToList, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 480, 80, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 643, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogOutMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLogOutMouseReleased
        int input = JOptionPane.showConfirmDialog(this, "Do you want to cancel the operation?", "", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (input == JOptionPane.YES_OPTION) {
            DashBoardView.indexes.remove(index);
            System.gc();
            this.dispose();
        }
    }//GEN-LAST:event_btnLogOutMouseReleased

    private void spinnerQtyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerQtyStateChanged
        if (Integer.parseInt(spinnerQty.getValue().toString()) < 0) {
            spinnerQty.setValue(0);
        }
    }//GEN-LAST:event_spinnerQtyStateChanged

    private void cmbGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbGroupActionPerformed
        try {
            setDtmFamily();
            setDtmComponent();
            resetTxt();
            cmbGroupAction(cmbGroup.getSelectedIndex());
        } catch (SQLException ex) {
            Logger.getLogger(IssueView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbGroupActionPerformed

    private void tblFamilyMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFamilyMouseReleased
        try {
            setDtmComponent();
            resetTxt();
            tblFamilyAction(cmbGroup.getSelectedIndex(), tblFamily.getSelectedRow());
        } catch (SQLException ex) {
            Logger.getLogger(IssueView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tblFamilyMouseReleased

    private void txtComponentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtComponentKeyReleased
        try {
            setDtmComponent();
            txtComponentAction(cmbGroup.getSelectedIndex(), tblFamily.getSelectedRow(), txtComponent.getText());
        } catch (SQLException ex) {
            Logger.getLogger(IssueView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtComponentKeyReleased

    private void btnLogOutMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLogOutMouseEntered
        btnLogOut.setBorder(BorderFactory.createLineBorder(ColorPalette.LOGIN_BTN_BG_1, 1));
    }//GEN-LAST:event_btnLogOutMouseEntered

    private void btnLogOutMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLogOutMouseExited
        btnLogOut.setBorder(BorderFactory.createEmptyBorder());
    }//GEN-LAST:event_btnLogOutMouseExited

    private void btnAddToTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToTableActionPerformed
        try {
            btnAddToTableAction();
        } catch (SQLException ex) {
            Logger.getLogger(IssueView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddToTableActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        btnClearAction();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnRemoveFromTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveFromTableActionPerformed
        btnRemoveFromTableAction();
    }//GEN-LAST:event_btnRemoveFromTableActionPerformed

    private void btnAddToListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToListActionPerformed
        int rowCount = tblList.getRowCount();
        if (rowCount == 0) {
            JOptionPane.showMessageDialog(this, "No items in the ilst", "", JOptionPane.INFORMATION_MESSAGE);
        } else {
            int input = JOptionPane.showConfirmDialog(this, "Do you want to add items to the list?", "", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (input == JOptionPane.YES_OPTION) {
                try {
                    btnAddToListAction(rowCount);
                    DashBoardView.indexes.remove(index);
                    System.gc();
                    this.dispose();
                } catch (SQLException ex) {
                    Logger.getLogger(IssueView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btnAddToListActionPerformed

    public void initializeView(String index) throws SQLException {
        this.index = index;
        lblIndex.setText(index);
        resetTxt();
        setDtmFamily();
        setDtmComponent();
        setDtmList();
        cmbGroup.removeAllItems();
        cmbGroup.addItem("<All groups>");

        List<String> groups = ApparatusSQL.getGroups();
        groups.forEach(group -> {
            cmbGroup.addItem(group);
        });
        components = new ArrayList<>();
    }

    private void setDtmFamily() {
        dtmFamily = (DefaultTableModel) this.tblFamily.getModel();
        dtmFamily.getDataVector().removeAllElements();
        dtmFamily.fireTableDataChanged();
    }

    private void setDtmComponent() {
        dtmComponent = (DefaultTableModel) this.tblComponent.getModel();
        dtmComponent.getDataVector().removeAllElements();
        dtmComponent.fireTableDataChanged();
    }

    private void setDtmList() {
        dtmList = (DefaultTableModel) this.tblList.getModel();
        dtmList.getDataVector().removeAllElements();
        dtmList.fireTableDataChanged();
    }

    private void resetTxt() {
        txtComponent.setText("");
        spinnerQty.setValue(0);
    }

    private void cmbGroupAction(int group) throws SQLException {
        switch (group) {
            case -1:
                break;
            case 0:
                List<Object> list1 = ApparatusSQL.getAllFamilies();
                list1.forEach(object -> {
                    dtmFamily.addRow(new Object[]{object});
                });
                break;

            default:
                List<Object> list2 = ApparatusSQL.getFamilies(cmbGroup.getSelectedItem().toString());
                list2.forEach(object -> {
                    dtmFamily.addRow(new Object[]{object});
                });
                break;

        }
    }

    private void tblFamilyAction(int group, int family) throws SQLException {
        if (group == -1 || family == -1); else if (group == 0 && family == 0) {
            List<Apparatus> list = ApparatusSQL.getAllComponents();
            list.forEach(apparatus -> {
                dtmComponent.addRow(new Object[]{apparatus.getComponent(), apparatus.getQty()});
            });
        } else if (group == 0 && family != 0) {
            List<Apparatus> list = ApparatusSQL.getComponentsByFamily(tblFamily.getValueAt(family, 0).toString());
            list.forEach(apparatus -> {
                dtmComponent.addRow(new Object[]{apparatus.getComponent(), apparatus.getQty()});
            });
        } else if (family == 0 && group != 0) {
            List<Apparatus> list = ApparatusSQL.getComponentsByGroup(cmbGroup.getSelectedItem().toString());
            list.forEach(apparatus -> {
                dtmComponent.addRow(new Object[]{apparatus.getComponent(), apparatus.getQty()});
            });
        } else {
            List<Apparatus> list = ApparatusSQL.getComponents(cmbGroup.getSelectedItem().toString(), tblFamily.getValueAt(family, 0).toString());
            list.forEach(apparatus -> {
                dtmComponent.addRow(new Object[]{apparatus.getComponent(), apparatus.getQty()});
            });
        }
    }

    private void txtComponentAction(int group, int family, String componentStr) throws SQLException {
        if (!componentStr.equals("")) {
            if (family == -1) {
                JOptionPane.showMessageDialog(this, "Select the family", "", JOptionPane.INFORMATION_MESSAGE);
                resetTxt();
            } else if (group == 0 && family == 0) {
                List<Apparatus> list = ApparatusSQL.searchAllComponents(componentStr);
                if (list != null) {
                    list.forEach(apparatus -> {
                        dtmComponent.addRow(new Object[]{apparatus.getComponent(), apparatus.getQty()});
                    });
                }
            } else if (group == 0 && family != 0) {
                List<Apparatus> list = ApparatusSQL.searchComponentsByFamily(tblFamily.getValueAt(family, 0).toString(), componentStr);
                if (list != null) {
                    list.forEach(apparatus -> {
                        dtmComponent.addRow(new Object[]{apparatus.getComponent(), apparatus.getQty()});
                    });
                }
            } else if (group != 0 && family == 0) {
                List<Apparatus> list = ApparatusSQL.searchComponentsByGroup(cmbGroup.getSelectedItem().toString(), componentStr);
                if (list != null) {
                    list.forEach(apparatus -> {
                        dtmComponent.addRow(new Object[]{apparatus.getComponent(), apparatus.getQty()});
                    });
                }
            } else {
                List<Apparatus> list = ApparatusSQL.searchComponents(cmbGroup.getSelectedItem().toString(), tblFamily.getValueAt(family, 0).toString(), componentStr);
                if (list != null) {
                    list.forEach(apparatus -> {
                        dtmComponent.addRow(new Object[]{apparatus.getComponent(), apparatus.getQty()});
                    });
                }
            }
        } else {
            if (family == -1); else {
                tblFamilyAction(group, family);
            }
        }
    }

    private void btnAddToTableAction() throws SQLException {
        int[] arr;
        arr = tblComponent.getSelectedRows();
        switch (arr.length) {
            case 0:
                JOptionPane.showMessageDialog(this, "No components selected", "", JOptionPane.INFORMATION_MESSAGE);
                break;
            case 1:
                int qty = Integer.parseInt(spinnerQty.getValue().toString());
                if (spinnerQty.getValue().equals(0)) {
                    JOptionPane.showMessageDialog(this, "Select the quantity", "", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    int row = arr[0];
                    Apparatus apparatus = ApparatusSQL.searchByComponent(tblComponent.getValueAt(row, 0).toString());
                    if (apparatus != null) {
                        if (!components.contains(apparatus.getComponent())) {
                            if (apparatus.getQty() < qty) {
                                JOptionPane.showMessageDialog(this, "Insufficient " + apparatus.getComponent() + "\'s in the laborotory", "", JOptionPane.INFORMATION_MESSAGE);
                                spinnerQty.setValue(0);
                            } else {
                                dtmList.addRow(new Object[]{apparatus.getGroup(), apparatus.getFamily(), apparatus.getComponent(), qty});
                                components.add(apparatus.getComponent());
                                tblComponent.clearSelection();
                                resetTxt();
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Component " + apparatus.getComponent() + " is already in the list", "", JOptionPane.INFORMATION_MESSAGE);
                            tblComponent.clearSelection();
                            resetTxt();
                        }
                    }
                }
                break;
            default:
                JOptionPane.showMessageDialog(this, "Select one component at a time", "", JOptionPane.INFORMATION_MESSAGE);
                tblComponent.clearSelection();
                break;
        }
    }

    private void btnClearAction() {
        if (tblList.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "List is already empty", "", JOptionPane.INFORMATION_MESSAGE);
        } else {
            int input = JOptionPane.showConfirmDialog(this, "Do you want clear all the components from the list?", "", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (input == JOptionPane.YES_OPTION) {
                tblList.clearSelection();
                setDtmList();
                tblComponent.clearSelection();
                components.clear();
            }
        }
    }

    private void btnRemoveFromTableAction() {
        int[] arr;
        arr = tblList.getSelectedRows();
        if (arr.length == 0) {
            JOptionPane.showMessageDialog(this, "Select component(s) to remove from the list", "", JOptionPane.INFORMATION_MESSAGE);
        } else {
            for (int i = 0; i < arr.length; i++) {
                components.remove(tblList.getValueAt(arr[i] - i, 2));
                dtmList.removeRow(arr[i] - i);
            }
            tblList.clearSelection();
        }
    }

    public void setAdminId(int adminId) {
        this.adminId = adminId;
    }

    private void btnAddToListAction(int rowCount) throws SQLException {

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date date = new Date();

        ApparatusList aList = new ApparatusList(0, this.index, sdf.format(date), 0, "0000-00-00 00:00:00", adminId);
        ApparatusList temp1 = ListSQL.addApperatusList(aList);

        for (int i = 0; i < rowCount; i++) {
            Apparatus temp2 = ApparatusSQL.getComponentDetails(tblList.getValueAt(i, 2).toString());
            int id = temp2.getId();
            int qty = Integer.parseInt(tblList.getValueAt(i, 3).toString());
            int newQty = temp2.getQty() - qty;
            ListItems lItems = new ListItems(temp1.getListId(), id, qty, 0, "0000-00-00 00:00:00", adminId);
            ListSQL.addListItems(lItems);

            ListSQL.setQty(id, newQty);
        }
        JOptionPane.showMessageDialog(this, "The list was added successfully and you will be logged out automatically", "", JOptionPane.INFORMATION_MESSAGE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollPaneComponent;
    private javax.swing.JScrollPane ScrollPaneGroup;
    private javax.swing.JScrollPane ScrollPaneList;
    private javax.swing.JButton btnAddToList;
    private javax.swing.JButton btnAddToTable;
    private javax.swing.JButton btnClear;
    private javax.swing.JLabel btnLogOut;
    private javax.swing.JButton btnRemoveFromTable;
    private javax.swing.JComboBox<String> cmbGroup;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblComponent;
    private javax.swing.JLabel lblGroup;
    private javax.swing.JLabel lblIndex;
    private javax.swing.JLabel lblQty;
    private javax.swing.JPanel pnlLogOutBtn;
    private javax.swing.JSpinner spinnerQty;
    private javax.swing.JTable tblComponent;
    private javax.swing.JTable tblFamily;
    private javax.swing.JTable tblList;
    private javax.swing.JTextField txtComponent;
    // End of variables declaration//GEN-END:variables
}
